#!/usr/bin/env bash

# Processed Cloudformation File generated by package command
CF_PACKAGE="votify-packaged.yml"

cleanup () {
  rm $CF_PACKAGE
}

validate () {
  for template in $1
  do
    echo -n "Validating $template... "
    aws cloudformation validate-template --template-body file://$template 1>/dev/null
    if [ $? -eq 0 ]; then
      echo "OK."
    fi
  done
}

stack_exists () {
  local STACK_NAME=$1
  aws cloudformation describe-stacks --stack-name ${STACK_NAME} > /dev/null 2>&1
}

# Package the cloudformation resources
package () {
  local TEMPLATE_ENTRY=$1
  local S3_BUCKET=$2
  local S3_BUCKET_PREFIX=$3
  OUT=$( aws cloudformation package \
              --template-file ${TEMPLATE_ENTRY} \
              --s3-bucket ${S3_BUCKET} \
              --s3-prefix deploy-${S3_BUCKET_PREFIX} \
              --output-template-file $CF_PACKAGE 2>&1 )
  RES=$?
  if echo "$OUT" | grep -q "Invalid"; then
    return 1
  fi
  echo $CF_PACKAGE
}

# Create or update the cloudformation stack
create_or_update_stack () {
  local STACK_NAME=$1
  local TEMPLATE=$2
  local PARAMETERS=$3
  local ACTION="create"

  if stack_exists $STACK_NAME; then
      echo "INFO: Stack $STACK_NAME exists. Updating the stack."
      ACTION="update"
  else
      echo "INFO: Stack $STACK_NAME does not exist. Creating a new stack."
  fi

  aws cloudformation ${ACTION}-stack \
      --stack-name ${STACK_NAME} \
      --template-body file://${TEMPLATE} \
      --parameters file://${PARAMETERS} \
      --capabilities CAPABILITY_NAMED_IAM 2>&1
  RES=$?

  if [ $RES -ne 0 ] && echo "$OUT" | grep -q "No updates"; then
      echo "$OUT"
  elif [ $RES -ne 0 ]; then
      echo "$OUT" && exit $RES
  else
      echo Stack $ACTION in progress, waiting ...
      aws cloudformation wait stack-$ACTION-complete \
          --stack-name ${STACK_NAME} \
          && echo Stack $ACTION complete
  fi
}
