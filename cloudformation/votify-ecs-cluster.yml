AWSTemplateFormatVersion: 2010-09-09

Description: Votify ECS Cluster

Parameters:
  InstallationName:
    Type: String
    Description: Indentifier for entire stack and related resources
  ClusterName:
    Type: String
    Description: The name of the ECS cluster
  VPC:
    Description: VPC to deploy cluster into
    Type: AWS::EC2::VPC::Id
  PrivateSubnets:
    Description: Private subnets within VPC to deploy into
    Type: List<AWS::EC2::Subnet::Id>
  ClusterSecurityGroup:
    Description: Security group to apply to underlying cluster hosts
    Type: AWS::EC2::SecurityGroup::Id
  ClusterSize:
    Description: Number of EC2 Hosts in cluster
    Type: Number
    Default: 1
  InstanceType:
    Description: Instance type of underlying EC2 hosts
    Type: String
    Default: t2.small

Mappings:
  AWSRegionToAMI:
    us-east-2:
      AMI: ami-1c002379
    us-east-1:
      AMI: ami-9eb4b1e5
    us-west-2:
      AMI: ami-1d668865
    us-west-1:
      AMI: ami-4a2c192a
    eu-west-2:
      AMI: ami-cb1101af
    eu-west-1:
      AMI: ami-8fcc32f6
    eu-central-1:
      AMI: ami-0460cb6b
    ap-northeast-1:
      AMI: ami-b743bed1
    ap-southeast-2:
      AMI: ami-c1a6bda2
    ap-southeast-1:
      AMI: ami-9d1f7efe
    ca-central-1:
      AMI: ami-b677c9d2

Resources:

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  EcsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PrivateSubnets
      LaunchConfigurationName: !Ref EcsLaunchConfiguration
      MinSize: !Ref ClusterSize
      MaxSize: !Ref ClusterSize
      DesiredCapacity: !Ref ClusterSize
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName} ECS host
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0 # zero as we only have 1 instance for this service
        MaxBatchSize: 1
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

  EcsLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref ClusterSecurityGroup
      IamInstanceProfile: !Ref EcsInstanceProfile
      UserData:
        "Fn::Base64": !Sub |
            #!/bin/bash
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EcsLaunchConfiguration
            /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource EcsAutoScalingGroup
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/ecs/ecs.config":
              content: !Sub |
                ECS_CLUSTER=${ClusterName}
                ECS_ENGINE_AUTH_TYPE=dockercfg
            "/etc/sysconfig/docker":
              content: !Sub |
                OPTIONS="--log-driver=awslogs --log-opt awslogs-region=${AWS::Region} --log-opt awslogs-group=${LogGroup}"

  EcsHostRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${InstallationName}-EcsRole
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Action": "sts:AssumeRole",
            "Effect": "Allow",
            "Principal": {
              "Service": "ec2.amazonaws.com"
            }
          }]
        }
      Policies:
        - PolicyName: ecs-service
          PolicyDocument: |
            {
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "ecs:CreateCluster",
                  "ecs:DeregisterContainerInstance",
                  "ecs:DiscoverPollEndpoint",
                  "ecs:Poll",
                  "ecs:RegisterContainerInstance",
                  "ecs:StartTelemetrySession",
                  "ecs:Submit*",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "ecr:BatchCheckLayerAvailability",
                  "ecr:BatchGetImage",
                  "ecr:GetDownloadUrlForLayer",
                  "ecr:GetAuthorizationToken"
                ],
                "Resource": "*"
              }]
            }

  EcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EcsHostRole

Outputs:
  Cluster:
    Description: A reference to the ECS cluster
    Value: !Ref EcsCluster
