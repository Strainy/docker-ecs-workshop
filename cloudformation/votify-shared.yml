AWSTemplateFormatVersion: 2010-09-09

Description: Votify Shared Infrastructure Configuration

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC to deploy cluster into
  InstallationName:
    Type: String
    Description: Indentifier for entire stack and related resources
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public subnets for the Service Load Balancer

Resources:

  EcsClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ECS-Hosts

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the load balancer that sits in front of ECS
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: Name
          Value: !Sub ${InstallationName}-LoadBalancer

  PostgresRDSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permit traffic from Cluster to the Postgres RDS Instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EcsClusterSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${InstallationName}-RDS

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref InstallationName
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${InstallationName}-LB

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  # This is essentially a dummy target group as we can't create a listener
  # without a default action
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP

  # This IAM Role grants the ECS service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": [ "ecs.amazonaws.com" ]},
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "ec2:AuthorizeSecurityGroupIngress",
                  "ec2:Describe*",
                  "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                  "elasticloadbalancing:Describe*",
                  "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                  "elasticloadbalancing:DeregisterTargets",
                  "elasticloadbalancing:DescribeTargetGroups",
                  "elasticloadbalancing:DescribeTargetHealth",
                  "elasticloadbalancing:RegisterTargets"
                ],
                "Resource": "*"
              }]
            }

Outputs:
  EcsServiceRole:
    Value: !Ref ServiceRole
    Export:
      Name: !Sub ${InstallationName}-ServiceRole
  EcsClusterSecurityGroup:
    Value: !Ref EcsClusterSecurityGroup
  DbSecurityGroup:
    Value: !Ref PostgresRDSSG
  LoadBalancerEndpoint:
    Value: !GetAtt LoadBalancer.DNSName
  LoadBalancerListener:
    Value: !Ref LoadBalancerListener
